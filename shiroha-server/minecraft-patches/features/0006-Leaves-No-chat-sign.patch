From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mrhua269 <mrhua269@gmail.com>
Date: Sun, 19 Oct 2025 08:49:39 +0800
Subject: [PATCH] Leaves No chat sign

A part of Leaves(https://github.com/LeavesMC/Leaves/blob/master/leaves-server/minecraft-patches/features/0015-No-chat-sign.patch)

Original license: https://github.com/LeavesMC/Leaves/blob/master/LICENSE.md

diff --git a/net/minecraft/commands/arguments/ArgumentSignatures.java b/net/minecraft/commands/arguments/ArgumentSignatures.java
index 47cb25aa9c37bd84d156288c397321009f1d9ae2..1b210b15623328d881da32c3a49191a722306c65 100644
--- a/net/minecraft/commands/arguments/ArgumentSignatures.java
+++ b/net/minecraft/commands/arguments/ArgumentSignatures.java
@@ -13,10 +13,17 @@ public record ArgumentSignatures(List<ArgumentSignatures.Entry> entries) {
     private static final int MAX_ARGUMENT_COUNT = 8;
     private static final int MAX_ARGUMENT_NAME_LENGTH = 16;
 
+    // Leaves start - no chat sign
     public ArgumentSignatures(FriendlyByteBuf buffer) {
-        this(buffer.readCollection(FriendlyByteBuf.<List<ArgumentSignatures.Entry>>limitValue(ArrayList::new, 8), ArgumentSignatures.Entry::new));
+        this(readSign(buffer));
     }
 
+    private static List<ArgumentSignatures.Entry> readSign(FriendlyByteBuf buf) {
+        var entries = buf.readCollection(FriendlyByteBuf.<List<ArgumentSignatures.Entry>>limitValue(ArrayList::new, 8), ArgumentSignatures.Entry::new);
+        return i.moniasuki.shiroha.config.functions.LeavesModifyConfig.noChatSign ? List.of() : entries;
+    }
+    // Leaves end - no chat sign
+
     public void write(FriendlyByteBuf buffer) {
         buffer.writeCollection(this.entries, (buffer1, entry) -> entry.write(buffer1));
     }
diff --git a/net/minecraft/network/protocol/game/ServerboundChatPacket.java b/net/minecraft/network/protocol/game/ServerboundChatPacket.java
index b5afc05924ae899e020c303c8b86398e1d4ab8a0..3968508bece407ce125a828e0a56ec44755ae2f0 100644
--- a/net/minecraft/network/protocol/game/ServerboundChatPacket.java
+++ b/net/minecraft/network/protocol/game/ServerboundChatPacket.java
@@ -16,7 +16,7 @@ public record ServerboundChatPacket(String message, Instant timeStamp, long salt
     );
 
     private ServerboundChatPacket(FriendlyByteBuf buffer) {
-        this(buffer.readUtf(256), buffer.readInstant(), buffer.readLong(), buffer.readNullable(MessageSignature::read), new LastSeenMessages.Update(buffer));
+        this(buffer.readUtf(256), buffer.readInstant(), buffer.readLong(), buffer.readNullable(ServerboundChatPacket::readSign), new LastSeenMessages.Update(buffer)); // Leaves - no chat sign
     }
 
     private void write(FriendlyByteBuf buffer) {
@@ -27,6 +27,14 @@ public record ServerboundChatPacket(String message, Instant timeStamp, long salt
         this.lastSeenMessages.write(buffer);
     }
 
+    // Leaves start - no chat sign
+    private static MessageSignature readSign(FriendlyByteBuf buf) {
+        byte[] bs = new byte[256];
+        buf.readBytes(bs);
+        return i.moniasuki.shiroha.config.functions.LeavesModifyConfig.noChatSign ? null : new MessageSignature(bs);
+    }
+    // Leaves end - no chat sign
+
     @Override
     public PacketType<ServerboundChatPacket> type() {
         return GamePacketTypes.SERVERBOUND_CHAT;
diff --git a/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java b/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
index 1df628ac0b414511aaed6e09d78f884c4170f730..9a1f92331e96dca44e2677d5647a8357843c00b5 100644
--- a/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
+++ b/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
@@ -26,6 +26,11 @@ public record ServerboundChatSessionUpdatePacket(RemoteChatSession.Data chatSess
 
     @Override
     public void handle(ServerGamePacketListener handler) {
+        // Leaves start - no chat report
+        if (i.moniasuki.shiroha.config.functions.LeavesModifyConfig.noChatSign) {
+            return;
+        }
+        // Leaves end - no chat report
         handler.handleChatSessionUpdate(this);
     }
 }
diff --git a/net/minecraft/network/protocol/status/ServerStatus.java b/net/minecraft/network/protocol/status/ServerStatus.java
index a491be4250de3199c3e1aa9e5482b568692bd2f5..abf79782ce0ae86b7075cb73399ba3c40f55894e 100644
--- a/net/minecraft/network/protocol/status/ServerStatus.java
+++ b/net/minecraft/network/protocol/status/ServerStatus.java
@@ -20,7 +20,8 @@ public record ServerStatus(
     Optional<ServerStatus.Players> players,
     Optional<ServerStatus.Version> version,
     Optional<ServerStatus.Favicon> favicon,
-    boolean enforcesSecureChat
+    boolean enforcesSecureChat, // Leaves - no chat sign
+    boolean preventsChatReports // Leaves - no chat sign
 ) {
     public static final Codec<ServerStatus> CODEC = RecordCodecBuilder.create(
         instance -> instance.group(
@@ -28,11 +29,18 @@ public record ServerStatus(
                 ServerStatus.Players.CODEC.lenientOptionalFieldOf("players").forGetter(ServerStatus::players),
                 ServerStatus.Version.CODEC.lenientOptionalFieldOf("version").forGetter(ServerStatus::version),
                 ServerStatus.Favicon.CODEC.lenientOptionalFieldOf("favicon").forGetter(ServerStatus::favicon),
-                Codec.BOOL.lenientOptionalFieldOf("enforcesSecureChat", false).forGetter(ServerStatus::enforcesSecureChat)
+                Codec.BOOL.lenientOptionalFieldOf("enforcesSecureChat", false).forGetter(ServerStatus::enforcesSecureChat), // Leaves - no chat sign
+                Codec.BOOL.lenientOptionalFieldOf("preventsChatReports", false).forGetter(ServerStatus::preventsChatReports) // Leaves - no chat sign
             )
             .apply(instance, ServerStatus::new)
     );
 
+    // Leaves start - no chat sign
+    public ServerStatus(Component description, Optional<ServerStatus.Players> players, Optional<ServerStatus.Version> version, Optional<ServerStatus.Favicon> favicon, boolean enforcesSecureChat) {
+        this(description, players, version, favicon, enforcesSecureChat, i.moniasuki.shiroha.config.functions.LeavesModifyConfig.noChatSign);
+    }
+    // Leaves end - no chat sign
+
     public record Favicon(byte[] iconBytes) {
         private static final String PREFIX = "data:image/png;base64,";
         public static final Codec<ServerStatus.Favicon> CODEC = Codec.STRING.comapFlatMap(string -> {
diff --git a/net/minecraft/server/dedicated/DedicatedServer.java b/net/minecraft/server/dedicated/DedicatedServer.java
index c93feb64b6088a4878fcdb6e7c733a5f37e9385b..5c51503c66bea343064968f24fa3a70d12c5ff05 100644
--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -569,7 +569,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Paper start - Add setting for proxy online mode status
         return properties.enforceSecureProfile
             && io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode()
-            && this.services.canValidateProfileKeys();
+            && this.services.canValidateProfileKeys() && !i.moniasuki.shiroha.config.functions.LeavesModifyConfig.noChatSign; // Leaves - no chat sign
         // Paper end - Add setting for proxy online mode status
     }
 
diff --git a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index c54bf0429c0ca3a35a730658c7b1b3ddc776bf9e..9a398e43125d181d0abac5ccc7729ae362c02e8b 100644
--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -333,10 +333,24 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
     }
 
     public void send(Packet<?> packet) {
+        // Leaves start - rebuild ClientboundPlayerChatPacket
+        if (i.moniasuki.shiroha.config.functions.LeavesModifyConfig.noChatSign) {
+            if (this instanceof ServerGamePacketListenerImpl && packet instanceof net.minecraft.network.protocol.game.ClientboundPlayerChatPacket chat) {
+                packet = new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(chat.chatType().decorate(chat.unsignedContent() != null ? chat.unsignedContent() : Component.literal(chat.body().content())), false);
+            }
+        }
+        // Leaves end - rebuild ClientboundPlayerChatPacket
         this.send(packet, null);
     }
 
     public void send(Packet<?> packet, @Nullable ChannelFutureListener channelFutureListener) {
+        // Leaves start - no ClientboundPlayerChatHeaderPacket and rebuild ClientboundPlayerChatPacket
+        if (i.moniasuki.shiroha.config.functions.LeavesModifyConfig.noChatSign) {
+            if (packet instanceof net.minecraft.network.protocol.game.ClientboundPlayerChatPacket && channelFutureListener != null) {
+                channelFutureListener = null;
+            }
+        }
+        // Leaves end - no ClientboundPlayerChatHeaderPacket and rebuild ClientboundPlayerChatPacket
         // CraftBukkit start
         if (packet == null || this.processedDisconnect) { // Spigot
             return;
diff --git a/net/minecraft/server/players/PlayerList.java b/net/minecraft/server/players/PlayerList.java
index e96811d6fb16b89070634bb4358b2587b2d744d2..ba31fe7cc9488b83b524a225e3baea47b65c9238 100644
--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -1403,7 +1403,7 @@ public abstract class PlayerList {
     }
 
     public boolean verifyChatTrusted(PlayerChatMessage message) {
-        return message.hasSignature() && !message.hasExpiredServer(Instant.now());
+        return i.moniasuki.shiroha.config.functions.LeavesModifyConfig.noChatSign || (message.hasSignature() && !message.hasExpiredServer(Instant.now())); // Leaves - No Not Secure
     }
 
     // CraftBukkit start
